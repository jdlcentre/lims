/*
 * Copyright Curtin University, 2015.
 */
// DO NOT MODIFY THIS FILE BY HAND. IT WAS GENERATED BY generate_orm_files.py
package au.edu.curtin.lims.domain;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import com.vividsolutions.jts.geom.Geometry;

import org.hibernate.annotations.Type;

@Entity
@Table(name = "geosample")
@SequenceGenerator(name = "geosample_geosample_id_seq", sequenceName = "geosample_geosample_id_seq", allocationSize = 1)
public class Geosample implements Comparable<Geosample> {
    private int geosampleId;

    private MountType mountType;

    private String igsn;

    private String geosampleName;

    private Geometry location;

    private String rockType;

    private String siteCode;

    private String tectonicUnit;

    private Set<AnalysisRequest> analysisRequests = new HashSet<AnalysisRequest>();

    private List<Result> results;

    private List<Mindif> mindifs;

    public Geosample() { }

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "geosample_geosample_id_seq")
    @Column(name = "geosample_id", nullable = false)
    public Integer getGeosampleId() {
        return this.geosampleId;
    }
    
    @SuppressWarnings("unused")
    private void setGeosampleId(Integer geosampleId) {
        this.geosampleId = geosampleId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "mount_type_id")
    public MountType getMountType() {
        return mountType;
    }
    
    public void setMountType(MountType mountType) {
        this.mountType = mountType;
    }

    @Column(name = "igsn", nullable = true, length = 9)
    public String getIgsn() {
        return this.igsn;
    }
    
    public void setIgsn(String igsn) {
        this.igsn = igsn;
    }

    @Column(name = "geosample_name", nullable = true, length = 32)
    public String getGeosampleName() {
        return this.geosampleName;
    }
    
    public void setGeosampleName(String geosampleName) {
        this.geosampleName = geosampleName;
    }

    @Type(type = "org.hibernate.spatial.GeometryType")
    @Column(name = "location", nullable = false, length = 32)
    public Geometry getLocation() {
        return this.location;
    }
    
    public void setLocation(Geometry location) {
        this.location = location;
    }

    @Column(name = "rock_type", nullable = true, length = 32)
    public String getRockType() {
        return this.rockType;
    }
    
    public void setRockType(String rockType) {
        this.rockType = rockType;
    }

    @Column(name = "site_code", nullable = true, length = 32)
    public String getSiteCode() {
        return this.siteCode;
    }
    
    public void setSiteCode(String siteCode) {
        this.siteCode = siteCode;
    }

    @Column(name = "tectonic_unit", nullable = true, length = 128)
    public String getTectonicUnit() {
        return this.tectonicUnit;
    }
    
    public void setTectonicUnit(String tectonicUnit) {
        this.tectonicUnit = tectonicUnit;
    }

    @ManyToMany(
            mappedBy = "geosamples",
            fetch = FetchType.LAZY,
            cascade = { CascadeType.PERSIST, CascadeType.MERGE })
    public Set<AnalysisRequest> getAnalysisRequests() {
        return this.analysisRequests;
    }
    
    public void setAnalysisRequests(Set<AnalysisRequest> analysisRequests) {
        this.analysisRequests = analysisRequests;
    }

    @OneToMany(
        mappedBy = "geosample",
        fetch = FetchType.LAZY)
    @OrderBy("result_id")
    public List<Result> getResults() {
        return this.results;
    }
    
    public void setResults(List<Result> results) {
        this.results = results;
    }

    @OneToMany(
        mappedBy = "geosample",
        fetch = FetchType.LAZY)
    @OrderBy("mindif_id")
    public List<Mindif> getMindifs() {
        return this.mindifs;
    }
    
    public void setMindifs(List<Mindif> mindifs) {
        this.mindifs = mindifs;
    }

    @Override
    public int compareTo(Geosample o) {
        return this.getGeosampleId().compareTo(o.getGeosampleId());
    }
}
