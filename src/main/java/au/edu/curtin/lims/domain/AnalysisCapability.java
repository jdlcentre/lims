/*
 * Copyright Curtin University, 2015.
 */
// DO NOT MODIFY THIS FILE BY HAND. IT WAS GENERATED BY generate_orm_files.py
package au.edu.curtin.lims.domain;

import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

@Entity
@Table(name = "analysis_capability")
@SequenceGenerator(name = "analysis_capability_analysis_capability_id_seq", sequenceName = "analysis_capability_analysis_capability_id_seq", allocationSize = 1)
public class AnalysisCapability implements Comparable<AnalysisCapability> {
    private int analysisCapabilityId;

    private Instrument instrument;

    private AnalysisType analysisType;

    private ResultProcessorType resultProcessorType;

    private ResultProvisionType resultProvisionType;

    private ResultType resultType;

    private String resultProcessorName;

    private String version;

    private String resultProcessorValue;

    private List<AnalysisRequest> analysisRequests;

    public AnalysisCapability() { }

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "analysis_capability_analysis_capability_id_seq")
    @Column(name = "analysis_capability_id", nullable = false)
    public Integer getAnalysisCapabilityId() {
        return this.analysisCapabilityId;
    }
    
    @SuppressWarnings("unused")
    private void setAnalysisCapabilityId(Integer analysisCapabilityId) {
        this.analysisCapabilityId = analysisCapabilityId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "instrument_id")
    public Instrument getInstrument() {
        return instrument;
    }
    
    public void setInstrument(Instrument instrument) {
        this.instrument = instrument;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "analysis_type_id")
    public AnalysisType getAnalysisType() {
        return analysisType;
    }
    
    public void setAnalysisType(AnalysisType analysisType) {
        this.analysisType = analysisType;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "result_processor_type_id")
    public ResultProcessorType getResultProcessorType() {
        return resultProcessorType;
    }
    
    public void setResultProcessorType(ResultProcessorType resultProcessorType) {
        this.resultProcessorType = resultProcessorType;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "result_provision_type_id")
    public ResultProvisionType getResultProvisionType() {
        return resultProvisionType;
    }
    
    public void setResultProvisionType(ResultProvisionType resultProvisionType) {
        this.resultProvisionType = resultProvisionType;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "result_type_id")
    public ResultType getResultType() {
        return resultType;
    }
    
    public void setResultType(ResultType resultType) {
        this.resultType = resultType;
    }

    @Column(name = "result_processor_name", nullable = false, length = 64)
    public String getResultProcessorName() {
        return this.resultProcessorName;
    }
    
    public void setResultProcessorName(String resultProcessorName) {
        this.resultProcessorName = resultProcessorName;
    }

    @Column(name = "version", nullable = false, length = 16)
    public String getVersion() {
        return this.version;
    }
    
    public void setVersion(String version) {
        this.version = version;
    }

    @Column(name = "result_processor_value", nullable = true, length = 64)
    public String getResultProcessorValue() {
        return this.resultProcessorValue;
    }
    
    public void setResultProcessorValue(String resultProcessorValue) {
        this.resultProcessorValue = resultProcessorValue;
    }

    @OneToMany(
        mappedBy = "analysisCapability",
        fetch = FetchType.LAZY)
    @OrderBy("analysis_request_id")
    public List<AnalysisRequest> getAnalysisRequests() {
        return this.analysisRequests;
    }
    
    public void setAnalysisRequests(List<AnalysisRequest> analysisRequests) {
        this.analysisRequests = analysisRequests;
    }

    @Override
    public int compareTo(AnalysisCapability o) {
        return this.getAnalysisCapabilityId().compareTo(o.getAnalysisCapabilityId());
    }
}
