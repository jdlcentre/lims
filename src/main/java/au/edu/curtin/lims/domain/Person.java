/*
 * Copyright Curtin University, 2015.
 */
// DO NOT MODIFY THIS FILE BY HAND. IT WAS GENERATED BY generate_orm_files.py
package au.edu.curtin.lims.domain;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

@Entity
@Table(name = "person")
@SequenceGenerator(name = "person_person_id_seq", sequenceName = "person_person_id_seq", allocationSize = 1)
public class Person implements Comparable<Person> {
    private int personId;

    private String username;

    private String password;

    private boolean enabled;

    private Set<Authority> authorities = new HashSet<Authority>();

    private Set<Faction> factions = new HashSet<Faction>();

    private List<AnalysisRequest> analysisRequests;

    public Person() { }

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "person_person_id_seq")
    @Column(name = "person_id", nullable = false)
    public Integer getPersonId() {
        return this.personId;
    }
    
    @SuppressWarnings("unused")
    private void setPersonId(Integer personId) {
        this.personId = personId;
    }

    @Column(name = "username", nullable = false, length = 50)
    public String getUsername() {
        return this.username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }

    @Column(name = "password", nullable = false, length = 60)
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "enabled", nullable = false, length = 60)
    public boolean getEnabled() {
        return this.enabled;
    }
    
    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    @ManyToMany(
            fetch = FetchType.LAZY,
            cascade = { CascadeType.PERSIST, CascadeType.MERGE })
    @JoinTable(
        name = "person_authority_mm",
        joinColumns = { @JoinColumn(name = "person_id") },
        inverseJoinColumns = { @JoinColumn(name = "authority_id") })
    public Set<Authority> getAuthorities() {
        return this.authorities;
    }
    
    public void setAuthorities(Set<Authority> authorities) {
        this.authorities = authorities;
    }

    @ManyToMany(
            mappedBy = "people",
            fetch = FetchType.LAZY,
            cascade = { CascadeType.PERSIST, CascadeType.MERGE })
    public Set<Faction> getFactions() {
        return this.factions;
    }
    
    public void setFactions(Set<Faction> factions) {
        this.factions = factions;
    }

    @OneToMany(
        mappedBy = "person",
        fetch = FetchType.LAZY)
    @OrderBy("analysis_request_id")
    public List<AnalysisRequest> getAnalysisRequests() {
        return this.analysisRequests;
    }
    
    public void setAnalysisRequests(List<AnalysisRequest> analysisRequests) {
        this.analysisRequests = analysisRequests;
    }

    @Override
    public int compareTo(Person o) {
        return this.getPersonId().compareTo(o.getPersonId());
    }
}
